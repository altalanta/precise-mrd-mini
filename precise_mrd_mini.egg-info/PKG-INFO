Metadata-Version: 2.4
Name: precise-mrd-mini
Version: 0.1.0
Summary: Deterministic ctDNA/UMI MRD pipeline with hardened artifact contracts and CLI tooling
Author: Precise MRD Team
License: MIT License
        
        Copyright (c) 2024 Precise MRD Team
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Requires-Python: <3.13,>=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: LICENSE 2
Requires-Dist: numpy==1.26.4
Requires-Dist: pandas==2.2.2
Requires-Dist: scipy==1.13.1
Requires-Dist: scikit-learn==1.5.2
Requires-Dist: pyyaml==6.0.2
Requires-Dist: click==8.1.7
Requires-Dist: jsonschema==4.23.0
Requires-Dist: pandera[io]==0.19.3
Requires-Dist: dask[dataframe]==2024.8.2
Requires-Dist: distributed==2024.8.2
Requires-Dist: matplotlib==3.9.2
Requires-Dist: seaborn==0.13.2
Requires-Dist: xgboost==2.1.1
Requires-Dist: lightgbm==4.5.0
Requires-Dist: torch==2.4.1
Requires-Dist: torchvision==0.19.1
Requires-Dist: torchaudio==2.4.1
Requires-Dist: transformers==4.44.2
Requires-Dist: tokenizers==0.19.1
Requires-Dist: fastapi==0.115.0
Requires-Dist: uvicorn[standard]==0.31.1
Requires-Dist: pydantic==2.9.2
Requires-Dist: python-multipart==0.0.9
Requires-Dist: aiofiles==24.1.0
Requires-Dist: httpx==0.27.2
Requires-Dist: streamlit==1.39.0
Requires-Dist: plotly==5.24.1
Requires-Dist: streamlit-plotly-events==0.0.6
Provides-Extra: dev
Requires-Dist: pytest==8.3.3; extra == "dev"
Requires-Dist: pytest-cov==5.0.0; extra == "dev"
Requires-Dist: black==24.8.0; extra == "dev"
Requires-Dist: mypy==1.11.2; extra == "dev"
Requires-Dist: ruff==0.6.8; extra == "dev"
Requires-Dist: hypothesis==6.112.1; extra == "dev"
Requires-Dist: types-PyYAML==6.0.12.20240917; extra == "dev"
Requires-Dist: twine==5.1.1; extra == "dev"
Requires-Dist: dvc[s3]==3.50.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: mkdocs-material>=9.0.0; extra == "docs"
Requires-Dist: mkdocs-gen-files>=0.5.0; extra == "docs"
Requires-Dist: mkdocstrings[python]>=0.24.0; extra == "docs"
Dynamic: license-file

# Precise MRD

[![CI](https://github.com/altalanta/precise-mrd-mini/workflows/CI/badge.svg)](https://github.com/altalanta/precise-mrd-mini/actions)
[![Documentation](https://github.com/altalanta/precise-mrd-mini/workflows/Documentation/badge.svg)](https://github.com/altalanta/precise-mrd-mini/actions)
[![Docs](https://img.shields.io/badge/docs-mkdocs-blue)](https://altalanta.github.io/precise-mrd-mini/)
[![Python 3.11](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)

A ctDNA/UMI toy MRD pipeline with **formal detection limit analytics**, deterministic error modeling, statistical validation, and comprehensive CI/CD hardening.

## Features

üß¨ **Deterministic UMI Processing**
- Modern NumPy RNG API (`np.random.default_rng`)
- Reproducible seed management across all components
- Hash-verified artifact consistency

üìä **Formal Detection Limits** ‚≠ê
- **LoB (Limit of Blank)**: 95th percentile of blank measurements
- **LoD (Limit of Detection)**: AF yielding 95% detection probability with bias-corrected CIs
- **LoQ (Limit of Quantification)**: Lowest AF meeting precision criteria (CV ‚â§ 20%)

üî¨ **Contamination Robustness** ‚≠ê
- Index-hopping stress testing with configurable hop rates
- Barcode collision modeling and impact assessment
- Cross-sample contamination sensitivity analysis

üìà **Stratified Analysis** ‚≠ê
- Power analysis by trinucleotide context and depth
- Calibration assessment across AF/depth strata
- Context-specific error modeling

üìä **Statistical Rigor**
- Type I error control validation
- Benjamini-Hochberg FDR correction with monotonicity tests
- Bootstrap confidence intervals with coverage validation

üéØ **Artifact Contract**
- Schema-validated JSON outputs
- Guaranteed artifact paths and structure
- Complete run context metadata

üîç **CI/CD Hardening**
- Determinism verification (hash comparison)
- Statistical sanity tests (< 60s runtime)
- Fail-closed behavior on regressions

üöÄ **Data Version Control (DVC) Integration** ‚≠ê
- Automatic experiment tracking and data versioning
- Parameterized pipeline stages with dependency tracking
- Remote storage support for large datasets
- Systematic comparison of different configurations

üìö **Documentation** ‚≠ê
- Complete MkDocs site with GitHub Pages deployment
- Comprehensive evaluation methodology documentation
- **Interactive tutorials** with hands-on examples for detection limits and contamination analysis
- Step-by-step guides for clinical implementation

## Quick Start

```bash
uv sync --extra dev --extra docs   # Install locked dependencies
precise-mrd smoke                  # Run fast deterministic pipeline
precise-mrd determinism            # Verify hash-stable artifacts
```

## DVC-Enhanced Workflows

For advanced reproducibility and experiment tracking:

```bash
make dvc-setup                     # Initialize DVC (one-time)
make smoke-dvc                    # Smoke test with DVC tracking
make eval-dvc                     # All evaluations with DVC
make dvc-experiment name=test     # Run parameter experiments
dvc exp show                      # Compare experiments
```

## Tutorials ‚≠ê

New to Precise MRD? Start with our interactive tutorials:

- **[Formal Detection Limits](https://altalanta.github.io/precise-mrd-mini/tutorials/formal-detection-limits/)**: Learn LoB, LoD, and LoQ calculations with hands-on examples
- **[Contamination Analysis](https://altalanta.github.io/precise-mrd-mini/tutorials/contamination-analysis/)**: Understand contamination impact and mitigation strategies

Prefer Makefiles? `make setup`, `make smoke`, and `make determinism` wrap the
same CLI entry points for backwards compatibility.

## Determinism & Reproducibility

**Guaranteed deterministic execution**:
- All random operations use seeded `np.random.Generator` instances
- No global random state dependencies
- SHA256-verified artifact consistency
- Complete environment fingerprinting

### Verification Commands

```bash
# Verify determinism (identical hash manifest across runs)
precise-mrd determinism --out-dir data/determinism

# Run statistical validation tests (fast set)
pytest -q

# Generate hash manifest for downstream comparison
precise-mrd smoke --out-dir data/contracts
cat reports/hash_manifest.txt
```

## Detection Limit Analytics

### New Evaluation Commands ‚≠ê

```bash
# Formal detection limits
precise-mrd eval-lob --n-blank 50
precise-mrd eval-lod --replicates 25
precise-mrd eval-loq --replicates 25

# Contamination robustness
precise-mrd eval-contamination

# Stratified analysis
precise-mrd eval-stratified
```

### New Artifacts ‚≠ê

**Detection Limits**:
- `reports/lob.json` - Limit of Blank results (95th percentile of blank measurements)
- `reports/lod_table.csv` - Limit of Detection per depth with confidence intervals
- `reports/lod_curves.png` - Detection curves visualization
- `reports/loq_table.csv` - Limit of Quantification results

**Contamination Analysis**:
- `reports/contam_sensitivity.json` - Impact assessment across contamination scenarios
- `reports/contam_heatmap.png` - Contamination impact heatmap

**Stratified Analysis**:
- `reports/power_by_stratum.json` - Context-specific detection power
- `reports/calibration_by_bin.csv` - Binned calibration metrics

### Expected Performance

| Depth | LoB (calls) | LoD (AF) | LoQ (AF) |
|-------|-------------|----------|----------|
| 1K    | ~2.1        | ~8.5e-3  | ~1.2e-2  |
| 5K    | ~3.8        | ~2.1e-3  | ~3.8e-3  |
| 10K   | ~5.2        | ~1.1e-3  | ~1.9e-3  |

## Artifact Contract

The pipeline **guarantees** these outputs:

**Core Pipeline**:
- `reports/metrics.json` - Performance metrics with bootstrap CIs (`schema_version` pinned)
- `reports/auto_report.html` - Interactive HTML report
- `reports/run_context.json` - Complete reproducibility metadata (`schema_version` pinned)
- `reports/hash_manifest.txt` - SHA256 verification manifest

**Detection Limits** (new):
- `reports/lob.json`, `reports/lod_table.csv`, `reports/loq_table.csv`
- `reports/lod_curves.png` - LoD visualization

**Contamination** (new):
- `reports/contam_sensitivity.json`, `reports/contam_heatmap.png`

**Stratified** (new):
- `reports/power_by_stratum.json`, `reports/calibration_by_bin.csv`

All JSON artifacts carry explicit schema versions and are validated via
`precise_mrd.validation.validate_artifacts` (JSON Schema + Pandera contracts).

### Example Run Context

```json
{
  "seed": 7,
  "timestamp": "2024-10-03T14:30:00.000Z",
  "config_hash": "a1b2c3d4e5f6",
  "git_sha": "7fd5373abc...",
  "python_version": "3.11.5",
  "numpy_version": "1.24.4",
  "cli_args": {"command": "smoke", "seed": 7}
}
```

## Pipeline Overview

### 1. Simulation (`simulate_reads`)
- Generates synthetic UMI families with configurable AF/depth grid
- Trinucleotide context-aware error modeling
- Deterministic family size distributions

### 2. UMI Collapse (`collapse_umis`) 
- Quality-weighted consensus calling
- Configurable family size thresholds
- Consensus agreement filtering

### 3. Error Modeling (`fit_error_model`)
- Context-specific background error estimation
- Bootstrap confidence intervals
- Negative control validation

### 4. Statistical Testing (`call_mrd`)
- Poisson/binomial hypothesis testing
- Benjamini-Hochberg FDR correction
- Effect size calculation

### 5. Performance Metrics (`calculate_metrics`)
- ROC/PR AUC with bootstrap CIs
- Calibration analysis
- Detection rate statistics

## Configuration

```yaml
# configs/smoke.yaml
run_id: "smoke_test"
seed: 7

simulation:
  allele_fractions: [0.01, 0.001, 0.0001]
  umi_depths: [1000, 5000]
  n_replicates: 10
  n_bootstrap: 100

umi:
  min_family_size: 3
  consensus_threshold: 0.6

stats:
  test_type: "poisson"
  alpha: 0.05
  fdr_method: "benjamini_hochberg"
```

## Command Line Interface

```bash
# Fast smoke test
precise-mrd smoke --seed 7 --out data/smoke

# Determinism verification
precise-mrd determinism-check --seed 7
```

## Development

### Running Tests

```bash
# All tests
make test

# Test coverage
make coverage

# Statistical validation only
make stat-sanity

# Determinism check
make determinism
```

### Code Quality

```bash
make lint      # Flake8 + mypy
make format    # Black + isort
```

### CI/CD Pipeline

The CI includes **fail-closed** jobs:

1. **Unit Tests** - Full test suite with coverage
2. **Determinism** - Hash comparison across identical runs
3. **Stats Sanity** - Type I error, FDR, bootstrap validation

**Any failure blocks the PR merge.**

## Statistical Validation

The pipeline includes lightweight statistical tests:

- **Type I Error Control**: Validates Œ±-level control in hypothesis testing
- **FDR Monotonicity**: Ensures BH correction is properly implemented  
- **Bootstrap Coverage**: Verifies CI coverage on synthetic data

All tests run in <60s for CI efficiency.

## Repository Safety

‚ö†Ô∏è **Important**: Avoid `git clean -xfd` as it removes untracked work.

Use `make clean-safe` instead to clean only generated artifacts.

## Performance

- **Smoke test**: <5 minutes on standard CI
- **Statistical tests**: <60 seconds  
- **Memory usage**: ~200MB peak for smoke test

## Limitations

1. **Synthetic Data**: Uses simulated reads, not real FASTQ
2. **Simplified Models**: Basic error and contamination models
3. **Limited Contexts**: Subset of trinucleotide contexts implemented

## Citation

```bibtex
@software{precise_mrd,
  title = {Precise MRD: Deterministic ctDNA/UMI Pipeline},
  author = {Precise MRD Team},
  url = {https://github.com/user/precise-mrd-mini},
  version = {0.1.0},
  year = {2024}
}
```

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
