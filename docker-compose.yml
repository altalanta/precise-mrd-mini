version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PRECISE_MRD_LOG_LEVEL=INFO
      - PRECISE_MRD_API_HOST=0.0.0.0
      - PRECISE_MRD_API_PORT=8000
      - ENABLE_PARALLEL_PROCESSING=true
      - ENABLE_ML_CALLING=true
      - ENABLE_DEEP_LEARNING=true
      - MAX_CONCURRENT_JOBS=5
    volumes:
      - data_volume:/app/data
      - results_volume:/app/api_results
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Optional: Redis for job queuing (can be replaced with cloud services)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    profiles:
      - with-redis

  # Optional: PostgreSQL for job metadata (can be replaced with cloud databases)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: mrd_jobs
      POSTGRES_USER: mrd_user
      POSTGRES_PASSWORD: mrd_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    profiles:
      - with-postgres

  # Optional: MinIO for object storage (can be replaced with cloud storage)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: mrd-admin
      MINIO_ROOT_PASSWORD: mrd-password
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    profiles:
      - with-storage

volumes:
  data_volume:
    driver: local
  results_volume:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  default:
    name: mrd-network

